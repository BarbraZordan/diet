{
  "name": "diet",
  "version": "0.6.0",
  "description": "Diet is a beautiful, minimalistic, extensible web application framework for node.",
  "homepage": "http://dietjs.com/",
  "keywords": [
    "diet",
    "web",
    "framework",
    "http",
    "rest",
    "api",
    "https",
    "routing",
    "router",
    "page routing",
    "url parse",
    "querystring",
    "restful",
    "web server",
    "domains",
    "subdomains",
    "request",
    "response",
    "dietjs",
    "diet.js"
  ],
  "bugs": {
    "url": "http://github.com/adamhalasz/dietjs/issues",
    "email": "mail@adamhalasz.com"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/adamhalasz/diet.git"
  },
  "license": "MIT",
  "author": {
    "name": "Halász Ádám",
    "email": "mail@adamhalasz.com",
    "url": "http://adamhalasz.com/"
  },
  "dependencies": {
    "nextjs": ">=0.0.3",
    "exec-sync": ">=0.1.6",
    "colors": ">=0.6.2",
    "path-to-regexp": ">=0.2.3",
    "callsite": ">=1.0.0"
  },
  "main": "index.js",
  "engines": {
    "node": ">=0.8.21"
  },
  "readme": "# **Diet**\nDiet is a beautiful, minimalistic, extensible web application framework for node.\n\n![Diet.js on launch][1]\n## **What does diet do?**\n\n - **Plugins** that extend your apps functionality.\n - **URL Routing**.\n - **Domain Routing**.\n - The **`$` Signal Argument**  is a combination of the request and response object. You can access the signal argument in every route and plugin. The signal helps to connect and send data between plugins/modules.\n\n## **Install**\n```\nnpm install diet \n```\n\n## **Hello World!**\n```js\nrequire('diet');\n\napp = new App();\napp.start('http://localhost:8000/');\napp.get('/', function($){ \n    $.end('Hello World!'); \n});\n```\n\n## **Hello HTML!**\n![Complete Hello World example with HTML Template][2]\n\nSetup a new project in **/project/index.js**\n```js\n// Require Diet\nrequire('diet');\n\n// New App\napp = new App();\n\n// Load HTML Parser Plugin\napp.plugin('diet-ect', { alias: 'html' });\n\n// Start the App\napp.start('http://localhost:8000/');\n\n// Listen on GET /\napp.get('/', function($){\n\t$.data.page = 'home';\n\t$.html();\n});\n```\nAnd write an HTML view in **/project/static/index.html**\n```html\n<!DOCTYPE html>\n<html>\n\t<head>\n\t\t<title>Hello World</title>\n\t</head>\n\t<body>\n\t\t<h1>Hello World</h1>\n\t\tWelcome to the <b>{{-this.page}}</b> page.\n\t</body>\n</html> \n```\n\n# **Plugin Directory**\nWe have a list of plugins categorized by their purpose in the wiki: \nhttps://github.com/adamhalasz/diet/wiki/Plugins\n\n# **Signal ($)**\nThe signal argument is used in the context of *Routes* and *Plugins*.\n\n## **Example**\n```js\nrequire('diet');\n\napp = new App();\napp.plugin('plugin_name');\napp.start('http://localhost:8000/');   \n\napp.get('/ ', function($){  // <-- the `$` sign is the signal argument\n    $.end('hello world');\n});\n```\n\n## **Signal Methods**\n\n#### **$.url** - *object*\nJSON Parsed `request.url`\n```js\n$.url = { \n    protocol: 'http:',\n    slashes: true,\n    host: 'example.com',\n    hostname: 'example.com',\n    href: 'http://example.com/',\n    pathname: '/',\n    path: '/' };\n```\n\n#### **$.query** - *object*\nJSON Parsed querystring\n```js\n// http://example.com/?query=value\n$.query = { query: 'value' };\n```\n\n#### **$.params** - *object*\nURL params from dynamic page routes like `/user/:id`\n```js\n// GET http://example.com/user/eddie\n$.params = { id: 'eddie' };\n```\n\n#### **$.data** - *object*\nan object used in html templates and `$.json()` responses\n```js\n$.data = {};\n```\n\n#### **$.body** - *object*\nJSON Parsed POST body data\n```js\n// POST http://example.com/?message=hello\n$.body = { message: 'hello' };\n```\n\n#### **$.headers** - *object*\nAn array of all headers.\n```js\n$.headers = { host: 'example.com',\n  connection: 'keep-alive',\n  accept: 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',\n  'user-agent': 'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_9_4) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.125 Safari/537.36',\n  'accept-encoding': 'gzip,deflate,sdch',\n  'accept-language': 'en-US,en;q=0.8,da;q=0.6,hu;q=0.4',\n  cookie: 'id=999' };\n```\n\n#### **$.header** - *function*\nGet or Set Headers. The second argument is for SET, if left empty it's GET. \n```js\n$.header('cookie')                    // GET `cookie` -> 'id=999'\n$.header('content-type', 'text/html') // SET `content-type` to `text/html`\n```\n\n#### **$.redirect** - *function*\nRedirect the request to a different path. `path` is requried, `statusCode` is optional.\n```js\n// api\n$.redirect(path, statusCode);\n```\n**Redirect to a Path**\n```js\n$.redirect('/to/some/path');        // internal redirect \n$.redirect('http://google.com/');   // external redirect\n```\n**Redirect Home**\n```js\n// redirect to home\n$.redirect('home');\n```\n```js\n// is the same as\n$.redirect('/');\n```\n**Redirect Back**\n```js\n// redirect back\n$.redirect('back');\n```\n```js\n// is the same as\n$.redirect($.request.headers.referer);\n```\n\n#### **$.method** - *string*\nA string that you can use to check the method of the request. It's either GET or POST.\n```js\n// GET http://example.com/\n$.method // -> GET\n\n// POST http://example.com/publish\n$.method // -> POST\n```\n\n#### **$.end** - *function*\nA function that ends the response and send back data to the requesting device.\n```js\napp.get('/', function($){\n    $.end('end response');\n});\n```\n\n#### **$.multipart** - *boolean*\nCheck if a POST request's enctype is is multipart or not. The value is a boolean: `true` or `false`.\n\n#### **$.noRoute** - *boolean*\nCheck if a request has a matching registered route from `app.get` or `app.post`. The value is a boolean: `true` or `false`.\n\n\n\n# **Routing**\nThe global signal is a Function Object. As a function you can use it to setup your applications routes. \n\n## **Simple Routing**\nDiet supports `get` and `post` methods.\n```js\n// examples\napp.get('/', ...);            // GET  http://example.com/\napp.get('/about', ...);       // GET  http://example.com/about\napp.get('/articles', ...);    // GET  http://example.com/articles\napp.post('/article', ...);      // POST http://example.com/article\n```\n\n## **Dynamic Routing**\nDiet supports Sinatra/Express like dynamic routing. Everything in the route path after `:` is passed to `$.params` with the name you provided.\n\n### **Get user by id**\nAs you can see `:id` becomes `$.params.id` which holds the value from the URL.\n```js\napp.get('/user/:id', function($){\n    $.end('User is ' + $.params.id); \n});\n// http://example.com/user/adam\n// -> User is adam\n```\n\n### **Get calendar by date**\nYou can have **multiple params** in a route, each is assigned to the `$.params` object with the parameter name you provide.\n```js\n// Calendar Date\napp.get('/calendar/:month/:day/:year', function($){\n    var message = $.params.month ',' + $.params.day + ',' + $.params.year;\n    $.end(message);\n});\n// http://example.com/calendar/05/10/2014\n// -> 05,10,2014\n```\n\n### **Get a list with a view option**\nIf you add `?` after the param such as `:view?` it becomes optional.\n```js\napp.get('/list/:view?', function($){\n    if($.params.view == 'gallery'){\n        $.end('Display #Gallery View'); \n    } else {\n        $.end('Display #List View');\n    }\n    \n});\n// http://example.com/list\n// -> Display #List View\n\n// http://example.com/list/gallery\n// -> Display #Gallery View\n```\n\n# **Domains**\nIn some cases you might want to serve multiple domains/sub-domains from the same node.js application. Diet handles this beautifully by calling a new instance of `App` and setting a domain upon starting it with `app.start(yourDomain)`\n\n\n## **Example Usage:**\n```js\napp = new App();\napp.start('http://yourDomain.com/'); // <-- ! full url required\n```\n## **More Examples:**\n```js\n// Diet\nrequire('diet');\n\n// Main Domain\napp = new App();\napp.start('http://example.com/');\napp.get('/', function($){\n\t$.end('hello world ');\n});\n\n// Sub Domain\nsub = new App();\nsub.start('http://subdomain.example.com/');\nsub.get('/', function($){\n\t$.end('hello world at sub domain!');\n});\n\n// Other Domain\nother = new App();\nother.start('http://other.com/');\nother.get('/', function($){\n\t$.end('hello world at other domain');\n});\n```\n\n## **Domain Methods**\nEach domain inherits these methods:\n```js\n// include a plugin\napp.plugin('plugin_name', configObject); // config is optional\n```\n```js\n// enable debug mode. `false` by default.\napp.debug = true; \n```\n```js\n// path of your application. `process.cwd()` by default\napp.path;\n```\n```js\n// Start App\napp.start(async_callback); // callback is optional\n```\n```js\n// route http(s) requests\napp.get('/path', pluginA, pluginB .., function($){ ... });\napp.post('/path', pluginA, pluginB .., function($){ ... });\n\n// the first argument is the path. \n// the last argument is your custom ending function\n// any argument between the first and last is a local plugin\n```\n\n# **Writing Diet Plugins**\nPlugins are middlewares that act as a bridge between modules and help write much more efficient Object Oriented code. Plugins are essentially regular node.js functions or modules that follow a standard mostly based on diet's `$` *(signal)* argument.\n\n#### **The 3 Types of Plugins**\nPlugins may be all or at least one of these types:\n\n- **Onload** plugin\n- **Global** plugin\n- **Local** plugin\n\t\n## **Onload Plugins**\nOnload plugins *run code right away after the plugin was initialized*. The use cases of onload plugins are very handy when you want to configure your plugin, preprocess some data, load/update caches, schedule/execute background tasks etc.\n\n**An Example Plugin:**\n```js  \n// project/example.js\nmodule.exports.onload = function($){ \n    console.log('hello world!');\n    $.return();\n}\n```\n```js\n// project/index.js\nrequire('diet');\napp = new App();\napp.plugin('example.js'); // -> hello world!\napp.start('http://localhost:8000/');\n\n```\n## **Global Plugins**\nGlobal plugins run on all incoming HTTP requests/routes. Global plugins can be handy when you need certain functionalities in all or a specific type of routes for example sessions & static file handling.\n\n**Example Plugin:**\n```js\n// project/example.js\nvar path = require('path');\nmodule.exports.global = function($){\n    this.extension = path.extname($.url.href);\n    $.return(this);\n}\n```\n```js\n// project/index.js\nrequire('diet');\n\napp = new App();\napp.plugin('example.js');\napp.start('http://localhost:8000/');\n\napp.get('/', function($){\n    $.end('Extension is ' + $.example.extension);\n});\n\napp.get('/image.jpg', function($){\n    $.end('Extension is ' + $.example.extension);\n});\n```\n```\n// terminal\ncurl 'http://localhost:8000/'\n-> Extension is undefined\n\ncurl 'http://localhost:8000/image.jpg'\n-> Extension is .jpg\n```\n\n## **Local Plugins**\nLocal plugins run on specified routes. Local plugins are handy for organizing your code for optimization, so each plugin is required only when it is actually needed.\n\n**Example Local Plugin as a Module:**\n```js\n// project/example.js\nmodule.exports.local = function($){\n    this.name = 'Adam';\n    this.age = 20;\n    $.return(this);\n}\n```\n```js\n// project/index.js\nrequire('diet');\napp = new App();\nvar person = app.plugin('example.js');\napp.start('http://localhost:8000/');\n\napp.get('/', person, function($){\n    $.end('Hi I am ' + $.person.name + ', '  + $.person.age + ' old.');\n    // -> Hi I am Adam, 20 years old.\n});\n```\n\n**Example Local Plugin as a Function:**\nLocal plugins can also be created as functions\n```js\n// project/index.js\nrequire('diet');\n\n// Create New App\napp = new App();\n\n// Start App\napp.start('http://localhost:8000/');\n\n// Define Local Plugin\nfunction person($){\n    this.name = 'Adam';\n    this.age = 20;\n    $.return(this);\n}\n\n// Use person in GET / route\napp.get('/', person, function($){\n    $.end('Hi I am, ' + $.person.name + ', '  + $.person.age + ' old');\n    // -> Hi I am Adam, 20 years old.\n});\n```\n\n# **Todos**\nCheck out the upcoming features:\nhttps://github.com/adamhalasz/diet/wiki/Todos\n\n# **License**\n(The MIT License)\n\nCopyright (c) 2014 Halász Ádám <mail@adamhalasz.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n\n  [1]: http://i.imgur.com/9dGfAgM.png\n  [2]: http://i.imgur.com/PFUM2E5.png\n",
  "readmeFilename": "Readme.md",
  "gitHead": "aa434cdd79a258300be4fe0d12c07cdbc4fc7224",
  "_id": "diet@0.5.9",
  "scripts": {},
  "_shasum": "e6a00f8eda55dfd5d6aebe0b7765e1f9c253428b",
  "_from": "diet@0.5.9"
}
